{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # Problem 4\n# \n# #### About the case-based reasoning technique, develop a case-based medical diagnosis system, where patient-reported symptoms are compared with previous cases to identify possible diseases and recommend treatments. Provide a solution for the following steps:\n# \n# #### * (4.1) Case indexing and representation: create a case base containing information about previous medical diagnoses, including symptoms reported by the patient and diagnosed disease.\n# #### * (4.2) Case retrieval: Implement a function that allows the system to receive patient-reported symptoms as input, then use a case retrieval algorithm to find similar cases in the case base, comparing the symptoms reported by the patient with the stored cases.\n# #### * (4.3) Present the diagnosis.\n# #### * (4.4) Use a tool to perform this application (e.g., MyCBR, JColibri, or PyCBR).\n# \n# #### Tips: If desired, consider looking at examples, such as:\n# https://github.com/wguilen/red-wine-quality-cbr/blob/master/presentation/RBC%20â€“%20Qualidade%20de%20vinho%20tinto.pptx\n# \n# https://github.com/topics/case-based-reasoning\n\n# %% [markdown]\n# ## Note on the adopted strategy:\n# \n# There was an import issue with the pycbr library, specifically related to a dependency with markupsafe. I attempted to resolve this by installing and updating some dependencies, but we still encountered version conflicts that remained unresolved. To work around these issues and ensure successful execution of the code, I opted for a different approach.\n# \n# Initially, I attempted to resolve the conflicting dependencies by installing specific versions of the libraries. However, even after this attempt, the conflicts persisted.\n# \n# Subsequently, I considered removing the pycbr library and manually implementing the case-based medical diagnostic system. This approach allows us to bypass the import issues and version conflicts, ensuring error-free execution.\n# \n# Although the question requested the use of a specific tool to perform the application, such as MyCBR, JColibri, or PyCBR, all of these options resulted in errors in the Kaggle notebook. Therefore, I chose a manual implementation to ensure successful completion of the task.\n\n# %% [markdown]\n# Step 1: Indexing and Case Representation\n# \n# In this step, we create a case base containing information about previous medical diagnoses.\n# \n# Each case is represented by a dictionary containing the symptoms reported by the patient and the diagnosed disease.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-16T20:51:14.669506Z\",\"iopub.execute_input\":\"2024-04-16T20:51:14.669971Z\",\"iopub.status.idle\":\"2024-04-16T20:51:14.706096Z\",\"shell.execute_reply.started\":\"2024-04-16T20:51:14.669935Z\",\"shell.execute_reply\":\"2024-04-16T20:51:14.704976Z\"}}\ncases = [\n    {\"symptoms\": [\"fever\", \"cough\", \"fatigue\"], \"disease\": \"flu\"},\n    {\"symptoms\": [\"headache\", \"runny nose\", \"sneezing\"], \"disease\": \"cold\"},\n]\n\n\n# %% [markdown]\n# Step 2: Case Retrieval\n# \n# Here, a function is implemented to find similar cases in the case base,by comparing the patient's reported symptoms with the stored cases.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-16T20:51:19.470282Z\",\"iopub.execute_input\":\"2024-04-16T20:51:19.470716Z\",\"iopub.status.idle\":\"2024-04-16T20:51:19.477270Z\",\"shell.execute_reply.started\":\"2024-04-16T20:51:19.470685Z\",\"shell.execute_reply\":\"2024-04-16T20:51:19.475796Z\"}}\ndef find_similar_cases(patient_symptoms, cases):\n    similar_cases = []\n    for case in cases:\n        if set(patient_symptoms) == set(case[\"symptoms\"]):\n            similar_cases.append(case)\n    return similar_cases\n\n# %% [markdown]\n# Step 3: Presenting the Diagnosis\n# \n# After finding similar cases, the corresponding diagnosis is presented. In this example, the diagnosed disease is returned.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-16T20:51:23.962751Z\",\"iopub.execute_input\":\"2024-04-16T20:51:23.963337Z\",\"iopub.status.idle\":\"2024-04-16T20:51:23.969847Z\",\"shell.execute_reply.started\":\"2024-04-16T20:51:23.963308Z\",\"shell.execute_reply\":\"2024-04-16T20:51:23.968520Z\"}}\ndef diagnose(patient_symptoms, cases):\n    similar_cases = find_similar_cases(patient_symptoms, cases)\n    if similar_cases:\n        return similar_cases[0][\"disease\"]\n    else:\n        return \"No diagnosis found\"\n\n# Example of usage:\npatient_symptoms = [\"fever\", \"cough\", \"fatigue\"]\nprint(diagnose(patient_symptoms, cases))","metadata":{"_uuid":"7aa791d4-308e-4f35-8cf7-a38ffcab186d","_cell_guid":"33f829c4-3070-4ff2-8f8b-febd3957f207","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}