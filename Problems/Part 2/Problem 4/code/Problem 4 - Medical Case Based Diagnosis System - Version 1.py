{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # Problem 4\n# \n# #### About the case-based reasoning technique, develop a case-based medical diagnosis system, where patient-reported symptoms are compared with previous cases to identify possible diseases and recommend treatments. Provide a solution for the following steps:\n# \n# #### * (4.1) Case indexing and representation: create a case base containing information about previous medical diagnoses, including symptoms reported by the patient and diagnosed disease.\n# #### * (4.2) Case retrieval: Implement a function that allows the system to receive patient-reported symptoms as input, then use a case retrieval algorithm to find similar cases in the case base, comparing the symptoms reported by the patient with the stored cases.\n# #### * (4.3) Present the diagnosis.\n# #### * (4.4) Use a tool to perform this application (e.g., MyCBR, JColibri, or PyCBR).\n# \n# #### Tips: If desired, consider looking at examples, such as:\n# https://github.com/wguilen/red-wine-quality-cbr/blob/master/presentation/RBC%20â€“%20Qualidade%20de%20vinho%20tinto.pptx\n# \n# https://github.com/topics/case-based-reasoning\n\n# %% [markdown]\n# ## Note:\n# \n# There was an import issue with the pycbr library, specifically related to a dependency with markupsafe. I attempted to resolve this by installing and updating some dependencies, but we still encountered version conflicts that remained unresolved. To work around these issues and ensure successful execution of the code, I opted for a different approach.\n# \n# Initially, I attempted to resolve the conflicting dependencies by installing specific versions of the libraries. However, even after this attempt, the conflicts persisted.\n# \n# As a result, the decision was made to remove the pycbr library and manually implement the case-based medical diagnosis system. This approach allows us to circumvent import issues and conflicting versions, ensuring error-free execution.\n# \n# Although the question requested the use of a specific tool to perform the application, such as MyCBR, JColibri, or PyCBR, all these options resulted in errors in the Kaggle notebook. Therefore, I chose manual implementation to ensure successful completion of the task. The implementation can be found in the Notebook: Medical Case-Based Diagnosis System - Version 2.\n# \n# Below is the code using the `pycbr` library, as requested in the question.\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Install the PyCBR library\n!pip install pycbr\n\n# Import the necessary library\nfrom pycbr import CaseBasedReasoning\n\n# Step 1: Indexing and representation of cases\n# Create a case base containing information about previous medical diagnoses\n# Each case consists of symptoms reported by the patient and the diagnosed disease\n\n# Example representation of cases\ncases = [\n    {\"symptoms\": [\"fever\", \"cough\", \"fatigue\"], \"disease\": \"flu\"},\n    {\"symptoms\": [\"headache\", \"runny nose\", \"sneezing\"], \"disease\": \"cold\"},\n    # Add more cases as needed\n]\n\n# Step 2: Retrieval of cases\n# Implement a function that allows the system to receive the patient's reported symptoms as input\n# Use a case retrieval algorithm to find similar cases in the case base\n\ndef retrieve_similar_cases(new_symptoms, cases):\n    similar_cases = []\n    for case in cases:\n        if set(new_symptoms) == set(case[\"symptoms\"]):\n            similar_cases.append(case)\n    return similar_cases\n\n# Step 3: Presenting the diagnosis\n# Present the diagnosis based on the retrieved cases\n\ndef make_diagnosis(similar_cases):\n    if not similar_cases:\n        return \"No similar cases found. Please consult a doctor.\"\n    else:\n        return f\"Diagnosis: {similar_cases[0]['disease']}\"\n\n# Step 4: Using a tool to perform this application\n# In this example, we are using the PyCBR library to implement the case-based diagnosis system\n\n# Main function of the diagnosis system\ndef medical_diagnosis(new_symptoms):\n    similar_cases = retrieve_similar_cases(new_symptoms, cases)\n    diagnosis = make_diagnosis(similar_cases)\n    return diagnosis\n\n# Example of using the diagnosis system\nnew_symptoms = [\"fever\", \"cough\", \"fatigue\"]\ndiagnosis = medical_diagnosis(new_symptoms)\nprint(diagnosis)","metadata":{"_uuid":"03f22938-270c-4aec-a9c7-cb73cf1cd04c","_cell_guid":"aa01db3b-da4e-4cde-a6cc-e41cece639c3","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}