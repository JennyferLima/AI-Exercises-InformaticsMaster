{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30673,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # Problem 5\n# \n# #### Present and discuss an example of applying a Bayesian network to implement a medical diagnosis system, presenting the modeling of relationships between symptoms and disease diagnosis. Present the knowledge representation solution you constructed and demonstrate the functioning of inference, illustrating with some examples. Utilize the Netica tool to perform this application. \n# \n# #### Note: Consider reviewing the alarm system example (from the book \"Artificial Intelligence: A Modern Approach\" by Stuart Russell and Peter Norvig), widely available, as the explanation of this example will greatly aid in understanding or formulating another. Another example of application is available in the Netica tool regarding medical diagnosis application.\n\n# %% [markdown]\n# Step 1: Installing the required library\n# \n# This line of code uses the `pip` command, which is a Python package manager, to install the `pgmpy` library. This library is used to build and manipulate Bayesian networks.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:25:58.540971Z\",\"iopub.execute_input\":\"2024-04-05T19:25:58.541522Z\",\"iopub.status.idle\":\"2024-04-05T19:26:12.722639Z\",\"shell.execute_reply.started\":\"2024-04-05T19:25:58.541483Z\",\"shell.execute_reply\":\"2024-04-05T19:26:12.721569Z\"}}\n# Installing the required library\n!pip install pgmpy\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:12.725065Z\",\"iopub.execute_input\":\"2024-04-05T19:26:12.725360Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.287965Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:12.725332Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.286824Z\"}}\n# Importing libraries\nfrom pgmpy.models import BayesianModel\nfrom pgmpy.estimators import MaximumLikelihoodEstimator\nfrom pgmpy.inference import VariableElimination\nfrom pgmpy.factors.discrete import TabularCPD\n\n# %% [markdown]\n# Step 2: Definition of Variables\n# \n# In this step, two lists are being defined: symptoms and diseases. These lists represent the symptoms and diseases that will be used in the medical diagnosis model.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:21.289211Z\",\"iopub.execute_input\":\"2024-04-05T19:26:21.290546Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.297756Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:21.290512Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.296987Z\"}}\n# Definition of Variables\nsymptoms = ['Fever', 'Cough', 'Headache']\ndiseases = ['Flu', 'Cold']\n\n# %% [markdown]\n# Step 3: Bayesian Network Construction\n# \n# In this step, the Bayesian network is being constructed. The BayesianModel() function takes a list of tuples as an argument, where each tuple represents a cause-and-effect relationship between variables. For example, ('Fever', 'Flu') indicates that fever may cause the flu.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:21.299725Z\",\"iopub.execute_input\":\"2024-04-05T19:26:21.300597Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.326551Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:21.300558Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.324874Z\"}}\n# Bayesian Network Construction\nmodel = BayesianModel([('Fever', 'Flu'), ('Cough', 'Flu'), ('Headache', 'Flu'),\n                       ('Fever', 'Cold'), ('Cough', 'Cold'), ('Headache', 'Cold')])\n\n# %% [markdown]\n# Step 4: Definition of Conditional Probabilities\n# \n# In this step, conditional probabilities are being defined for each variable. The TabularCPD class is used to create the CPDs. Each CPD is defined based on the variable, the number of possible states (variable_card), and the probability values for each state.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:21.329360Z\",\"iopub.execute_input\":\"2024-04-05T19:26:21.330260Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.339906Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:21.329679Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.338725Z\"}}\n# Definition of Conditional Probabilities\ncpd_fever = TabularCPD(variable='Fever', variable_card=2, values=[[0.3], [0.7]])\ncpd_cough = TabularCPD(variable='Cough', variable_card=2, values=[[0.2], [0.8]])\ncpd_headache = TabularCPD(variable='Headache', variable_card=2, values=[[0.1], [0.9]])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:21.341559Z\",\"iopub.execute_input\":\"2024-04-05T19:26:21.341971Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.352078Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:21.341936Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.351139Z\"}}\n# Defining CPDs for diseases\ncpd_flu = TabularCPD(variable='Flu', variable_card=2,\n                     values=[[0.8, 0.6, 0.4, 0.1, 0.7, 0.5, 0.3, 0.05],\n                             [0.2, 0.4, 0.6, 0.9, 0.3, 0.5, 0.7, 0.95]],\n                     evidence=['Fever', 'Cough', 'Headache'],\n                     evidence_card=[2, 2, 2])\n\ncpd_cold = TabularCPD(variable='Cold', variable_card=2,\n                      values=[[0.7, 0.5, 0.3, 0.05, 0.3, 0.1, 0.05, 0.01],\n                              [0.3, 0.5, 0.7, 0.95, 0.7, 0.9, 0.95, 0.99]],\n                      evidence=['Fever', 'Cough', 'Headache'],\n                      evidence_card=[2, 2, 2])\n\n# Associating CPDs with the model\nmodel.add_cpds(cpd_fever, cpd_cough, cpd_headache, cpd_flu, cpd_cold)\n\n\n\n# %% [markdown]\n# Step 5: Inference\n# \n# Here, the inference object is being initialized with the variable elimination algorithm. This object will be used later to perform inference on the Bayesian network.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:21.353469Z\",\"iopub.execute_input\":\"2024-04-05T19:26:21.353993Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.362995Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:21.353956Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.361865Z\"}}\n# Inference\ninference = VariableElimination(model)\n\n# %% [markdown]\n# Step 6: Function to Perform Diagnosis\n#     \n# Here a function called `perform_diagnosis` is being defined, which takes symptoms (fever, cough, and headache) as input and returns the probability of diseases (flu and cold) given the observed symptoms. The function maps 'Yes' to 1 and 'No' to 0, and then uses the inference object to perform the query on the Bayesian network.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:21.364040Z\",\"iopub.execute_input\":\"2024-04-05T19:26:21.364544Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.371328Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:21.364517Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.370383Z\"}}\n# Function to perform diagnosis\ndef perform_diagnosis(fever, cough, headache):\n    # Mapping 'Yes' to 1 and 'No' to 0\n    evidence = {'Fever': 1 if fever == 'Yes' else 0,\n                'Cough': 1 if cough == 'Yes' else 0,\n                'Headache': 1 if headache == 'Yes' else 0}\n    probability = inference.query(variables=diseases, evidence=evidence)\n    return probability\n\n# %% [markdown]\n# Step 7: Model Testing\n# \n# Finally, the diagnostic model is being tested by calling the `perform_diagnosis` function with some specific symptoms ('Yes' for fever and cough, 'No' for headache) and printing the result. The result will be the probability of diseases (flu and cold) given the provided symptoms.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-04-05T19:26:21.372500Z\",\"iopub.execute_input\":\"2024-04-05T19:26:21.373194Z\",\"iopub.status.idle\":\"2024-04-05T19:26:21.385971Z\",\"shell.execute_reply.started\":\"2024-04-05T19:26:21.373166Z\",\"shell.execute_reply\":\"2024-04-05T19:26:21.385106Z\"}}\n# Model Testing\nresult = perform_diagnosis('Yes', 'Yes', 'No')\nprint(result)","metadata":{"_uuid":"dfb32de7-5358-46f9-b879-a9f97724f8a9","_cell_guid":"3c68f8a3-756c-4ddd-aa4f-c48fbb457e90","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}